/*
 * wmMQOverrideConnection.java
 *
 * Copyright 2002 webMethods, Inc.
 * ALL RIGHTS RESERVED
 *
 * UNPUBLISHED -- Rights reserved under the copyright laws of the United States.
 * Use of a copyright notice is precautionary only and does not imply
 * publication or disclosure.
 *
 * THIS SOURCE CODE IS THE CONFIDENTIAL AND PROPRIETARY INFORMATION OF
 * WEBMETHODS, INC.  ANY REPRODUCTION, MODIFICATION, DISTRIBUTION,
 * OR DISCLOSURE IN ANY FORM, IN WHOLE, OR IN PART, IS STRICTLY PROHIBITED
 * WITHOUT THE PRIOR EXPRESS WRITTEN PERMISSION OF WEBMETHODS, INC.
 */

package com.wm.adapter.wmmqadapter.connection;

import java.util.Locale;

import javax.resource.ResourceException;

import com.wm.adapter.wmmqadapter.wmMQAdapter;
import com.wm.adapter.wmmqadapter.wmMQAdapterConstant;
import com.wm.adk.cci.record.WmRecord;
import com.wm.adk.cci.record.WmRecordFactory;
import com.wm.adk.connection.WmManagedConnection;
import com.wm.adk.error.AdapterConnectionException;
import com.wm.adk.error.AdapterException;
import com.wm.adk.log.ARTLogger;
import com.wm.adk.metadata.WmTemplateDescriptor;
import com.wm.data.IData;
import com.wm.data.IDataCursor;

/*
 * This class is an implementation of the lookup service template
 * for the wmMQAdapter. The lookup
 * takes a key as input, and returns the column values of the record.
 * An error is issued if there is no record for that key.
 *
 * This template demonstrates the use of combo boxes, allowing
 * a user to select catalogs, schemas, and tables.
 */
public class wmMQOverrideConnection
{

	public static final String USE_LOCAL_QUEUE_MANAGER_LABEL = "useLocalQueueManager";
	public static final String QUEUE_MANAGER_NAME_LABEL = "queueManagerName";
	public static final String QUEUE_HOST_NAME_LABEL = "hostName";
	public static final String QUEUE_PORT_LABEL = "port";
	public static final String QUEUE_CHANNEL_LABEL = "channel";
	public static final String QUEUE_CCSID_LABEL = "CCSID";
	public static final String QUEUE_ENCODING_LABEL = "encoding";
	public static final String QUEUE_NAME_LABEL = "queueName";
	public static final String QUEUE_DYNAMIC_QUEUE_PREFIX_LABEL = "dynamicQueuePrefix";
//	public static final String QUEUE_USERID_LABEL = "Userid";
//	public static final String QUEUE_PASSWORD_LABEL = "Password";

	private String OVERRIDE_CONNECTION_LABEL = "overrideConnection";
	private String OVERRIDDEN_CONNECTION_LABEL = "overrideConnection";

	private String _overrideUseLocalQueueManager = OVERRIDE_CONNECTION_LABEL + "." + USE_LOCAL_QUEUE_MANAGER_LABEL;
	private String _overrideConnectionQueueManagerName = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_MANAGER_NAME_LABEL;
	private String _overrideConnectionHostName = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_HOST_NAME_LABEL;
	private String _overrideConnectionPort = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_PORT_LABEL;
	private String _overrideConnectionChannel = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_CHANNEL_LABEL;
	private String _overrideConnectionCCSID = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_CCSID_LABEL;
	private String _overrideConnectionEncoding = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_ENCODING_LABEL;
	private String _overrideConnectionQueueName = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_NAME_LABEL;
	private String _overrideConnectionDynamicQueuePrefix = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_DYNAMIC_QUEUE_PREFIX_LABEL;
//	private String _overrideConnectionUserid = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_USERID_LABEL;
//	private String _overrideConnectionPassword = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_PASSWORD_LABEL;

	private String _overriddenConnectionQueueManagerName = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_MANAGER_NAME_LABEL;
	private String _overriddenConnectionHostName = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_HOST_NAME_LABEL;
	private String _overriddenConnectionPort = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_PORT_LABEL;
	private String _overriddenConnectionChannel = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_CHANNEL_LABEL;
	private String _overriddenConnectionCCSID = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_CCSID_LABEL;
	private String _overriddenConnectionEncoding = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_ENCODING_LABEL;
	private String _overriddenConnectionQueueName = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_NAME_LABEL;
	private String _overriddenConnectionDynamicQueuePrefix = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_DYNAMIC_QUEUE_PREFIX_LABEL;
//	private String _overriddenConnectionUserid = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_USERID_LABEL;
//	private String _overriddenConnectionPassword = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_PASSWORD_LABEL;

	private String[] _overrideConnectionPropertyType = {"string"};
	
    //Service name
    private String _serviceName = "";

    /*
     * Constructor.
     */
    public wmMQOverrideConnection(String serviceName)
    {
    	_serviceName = serviceName;
    	setLabels();
    }

	public wmMQOverrideConnection(String serviceName, String overrideLabel, String overriddenLabel)
	{
		_serviceName = serviceName;
		OVERRIDE_CONNECTION_LABEL = overrideLabel;
		OVERRIDDEN_CONNECTION_LABEL = overriddenLabel;
		setLabels();
	}
    
    private void setLabels()
    {
		_overrideUseLocalQueueManager = OVERRIDE_CONNECTION_LABEL + "." + USE_LOCAL_QUEUE_MANAGER_LABEL;
		_overrideConnectionQueueManagerName = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_MANAGER_NAME_LABEL;
		_overrideConnectionHostName = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_HOST_NAME_LABEL;
		_overrideConnectionPort = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_PORT_LABEL;
		_overrideConnectionChannel = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_CHANNEL_LABEL;
		_overrideConnectionCCSID = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_CCSID_LABEL;
		_overrideConnectionEncoding = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_ENCODING_LABEL;
		_overrideConnectionQueueName = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_NAME_LABEL;
		_overrideConnectionDynamicQueuePrefix = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_DYNAMIC_QUEUE_PREFIX_LABEL;
//		_overrideConnectionUserid = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_USERID_LABEL;
//		_overrideConnectionPassword = OVERRIDE_CONNECTION_LABEL + "." + QUEUE_PASSWORD_LABEL;

		_overriddenConnectionQueueManagerName = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_MANAGER_NAME_LABEL;
		_overriddenConnectionHostName = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_HOST_NAME_LABEL;
		_overriddenConnectionPort = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_PORT_LABEL;
		_overriddenConnectionChannel = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_CHANNEL_LABEL;
		_overriddenConnectionCCSID = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_CCSID_LABEL;
		_overriddenConnectionEncoding = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_ENCODING_LABEL;
		_overriddenConnectionQueueName = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_NAME_LABEL;
		_overriddenConnectionDynamicQueuePrefix = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_DYNAMIC_QUEUE_PREFIX_LABEL;
//		_overriddenConnectionUserid = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_USERID_LABEL;
//		_overriddenConnectionPassword = OVERRIDDEN_CONNECTION_LABEL + "." + QUEUE_PASSWORD_LABEL;
    }

	public String getOverrideUseLocalQueueManager()
	{
		return _overrideUseLocalQueueManager;
	}

	public void setOverrideUseLocalQueueManager(String overrideUseLocalQueueManager)
	{
		_overrideUseLocalQueueManager = overrideUseLocalQueueManager;
	}

	public String getOverrideConnectionQueueManagerName()
	{
		return _overrideConnectionQueueManagerName;
	}

	public void setOverrideConnectionQueueManagerName(String overrideConnectionQueueManagerName)
	{
		_overrideConnectionQueueManagerName = overrideConnectionQueueManagerName;
	}

	public String getOverrideConnectionHostName()
	{
		return _overrideConnectionHostName;
	}

	public void setOverrideConnectionHostName(String overrideConnectionHostName)
	{
		_overrideConnectionHostName = overrideConnectionHostName;
	}

	public String getOverrideConnectionPort()
	{
		return _overrideConnectionPort;
	}

	public void setOverrideConnectionPort(String overrideConnectionPort)
	{
		_overrideConnectionPort = overrideConnectionPort;
	}

	public String getOverrideConnectionChannel()
	{
		return _overrideConnectionChannel;
	}

	public void setOverrideConnectionChannel(String overrideConnectionChannel)
	{
		_overrideConnectionChannel = overrideConnectionChannel;
	}

	public String getOverrideConnectionCCSID()
	{
		return _overrideConnectionCCSID;
	}

	public void setOverrideConnectionCCSID(String overrideConnectionCCSID)
	{
		_overrideConnectionCCSID = overrideConnectionCCSID;
	}

	public String getOverrideConnectionEncoding()
	{
		return _overrideConnectionEncoding;
	}

	public void setOverrideConnectionEncoding(String overrideConnectionEncoding)
	{
		_overrideConnectionEncoding = overrideConnectionEncoding;
	}

	public String getOverrideConnectionQueueName()
	{
		return _overrideConnectionQueueName;
	}

	public void setOverrideConnectionQueueName(String overrideConnectionQueueName)
	{
		_overrideConnectionQueueName = overrideConnectionQueueName;
	}

	public String getOverrideConnectionDynamicQueuePrefix()
	{
		return _overrideConnectionDynamicQueuePrefix;
	}

	public void setOverrideConnectionDynamicQueuePrefix(String overrideConnectionDynamicQueuePrefix)
	{
		_overrideConnectionDynamicQueuePrefix = overrideConnectionDynamicQueuePrefix;
	}
/*
	public String getOverrideConnectionUserid()
	{
		return _overrideConnectionUserid;
	}

	public void setOverrideConnectionUserid(String overrideConnectionUserid)
	{
		_overrideConnectionUserid = overrideConnectionUserid;
	}

	public String getOverrideConnectionPassword()
	{
		return _overrideConnectionPassword;
	}

	public void setOverrideConnectionPassword(String overrideConnectionPassword)
	{
		_overrideConnectionPassword = overrideConnectionPassword;
	}
*/
	public String getOverriddenConnectionQueueManagerName()
	{
		return _overriddenConnectionQueueManagerName;
	}

	public void setOverriddenConnectionQueueManagerName(String overriddenConnectionQueueManagerName)
	{
		_overriddenConnectionQueueManagerName = overriddenConnectionQueueManagerName;
	}

	public String getOverriddenConnectionHostName()
	{
		return _overriddenConnectionHostName;
	}

	public void setOverriddenConnectionHostName(String overriddenConnectionHostName)
	{
		_overriddenConnectionHostName = overriddenConnectionHostName;
	}

	public String getOverriddenConnectionPort()
	{
		return _overriddenConnectionPort;
	}

	public void setOverriddenConnectionPort(String overriddenConnectionPort)
	{
		_overriddenConnectionPort = overriddenConnectionPort;
	}

	public String getOverriddenConnectionChannel()
	{
		return _overriddenConnectionChannel;
	}

	public void setOverriddenConnectionChannel(String overriddenConnectionChannel)
	{
		_overriddenConnectionChannel = overriddenConnectionChannel;
	}

	public String getOverriddenConnectionCCSID()
	{
		return _overriddenConnectionCCSID;
	}

	public void setOverriddenConnectionCCSID(String overriddenConnectionCCSID)
	{
		_overriddenConnectionCCSID = overriddenConnectionCCSID;
	}

	public String getOverriddenConnectionEncoding()
	{
		return _overriddenConnectionEncoding;
	}

	public void setOverriddenConnectionEncoding(String overriddenConnectionEncoding)
	{
		_overriddenConnectionEncoding = overriddenConnectionEncoding;
	}

	public String getOverriddenConnectionQueueName()
	{
		return _overriddenConnectionQueueName;
	}

	public void setOverriddenConnectionQueueName(String overriddenConnectionQueueName)
	{
		_overriddenConnectionQueueName = overriddenConnectionQueueName;
	}

	public String getOverriddenConnectionDynamicQueuePrefix()
	{
		return _overriddenConnectionDynamicQueuePrefix;
	}

	public void setOverriddenConnectionDynamicQueuePrefix(String overriddenConnectionDynamicQueuePrefix)
	{
		_overriddenConnectionDynamicQueuePrefix = overriddenConnectionDynamicQueuePrefix;
	}
/*
	public String getOverriddenConnectionUserid()
	{
		return _overriddenConnectionUserid;
	}

	public void setOverriddenConnectionUserid(String overriddenConnectionUserid)
	{
		_overriddenConnectionUserid = overriddenConnectionUserid;
	}

	public String getOverriddenConnectionPassword()
	{
		return _overriddenConnectionPassword;
	}

	public void setOverriddenConnectionPassword(String overriddenConnectionPassword)
	{
		_overriddenConnectionPassword = overriddenConnectionPassword;
	}
*/
	public String[] getOverrideConnectionPropertyType()
	{
		return _overrideConnectionPropertyType;
	}

	public void setOverrideConnectionPropertyType(String[] overrideConnectionPropertyType)
	{
		_overrideConnectionPropertyType = overrideConnectionPropertyType;
	}

	public wmMQConnection overrideConnection(WmManagedConnection connection, WmRecord input, boolean inbound)
			throws AdapterConnectionException
	{
		log(ARTLogger.INFO, 1001, "overrideConnection", "");
		wmMQConnection conn = (wmMQConnection)connection;
		IData override = null;
		IDataCursor idc = input.getCursor();
//		String temp = "";
//		String originalqueuename = "";

		try
		{
			if ((idc == null) || (!idc.first(OVERRIDE_CONNECTION_LABEL)))
				return conn;

			override = (IData)idc.getValue();
			idc = override.getCursor();
			if (idc == null)
				return conn;
			
			String qname = "";
			String qmgrname = "";
			String ccsid = "";
			String encoding = "";
			String hostname= "";
			String port = "";
			String channel = "";
			String originalccsid = "";
			String originalEncoding = "";
			String prefix = ""; 
			String originalprefix = "";
			String originalHostname= "";
			String originalPort = "";
			String originalChannel = "";
			String originalQname = "";
//			String userid = ""; 
//			String originaluserid = "";
//			String password = ""; 
//			String originalpassword = "";

			if (idc.first(QUEUE_NAME_LABEL))
				qname = (String)idc.getValue();
			if (idc.first(QUEUE_MANAGER_NAME_LABEL))
				qmgrname = (String)idc.getValue();
			if (idc.first(QUEUE_HOST_NAME_LABEL))
				hostname = (String)idc.getValue();
			if (idc.first(QUEUE_PORT_LABEL))
				port = (String)idc.getValue();
			if (idc.first(QUEUE_CHANNEL_LABEL))
				channel = (String)idc.getValue();
//			originalqueuename = qname;
			
			log(ARTLogger.INFO, 1003, "overrideConnection", "qname= " + qname);
			log(ARTLogger.INFO, 1003, "overrideConnection", "qmgrname= " + qmgrname);

			wmMQConnectionFactory connFactory = (wmMQConnectionFactory)conn.getFactory();

			//Allow these properties to be overridden even if the queuename/qmgrname are the same
			if (idc.first(QUEUE_CCSID_LABEL))
				ccsid = (String)idc.getValue();
			if (idc.first(QUEUE_ENCODING_LABEL))
				encoding = (String)idc.getValue();
			if (idc.first(QUEUE_DYNAMIC_QUEUE_PREFIX_LABEL))
				prefix = (String)idc.getValue();

			boolean newCF = false;
			boolean newConn = false;
			
			// Trax # 1-14WOV9 : Synchronize on the connection factory so that no other threads 
			// change the factory values while the current thread is creating the connection.
			synchronized(connFactory) { 
				if (conn != null)
				{
					//Check if user has specified different qmgrname/queuename
					if ((qname == null) || (qname.trim().equals(""))) 
					{
						qname = ((wmMQConnection)conn).getResolvedQueueName(inbound).trim();
						if ((qname == null) || (qname.equals("")))
							qname = ((wmMQConnection)conn).getQueueName();
					}
					if ((qmgrname == null) ||(qmgrname.trim().equals("")))
						qmgrname = ((wmMQConnection)conn).getResolvedQueueManagerName().trim();
					//This one is special. If the user wants to override a TCP/IP 
					//connection with a Bindings mode connection, they will have to 
					//specify a blank hostname.
					if ((hostname == null) ||(hostname.trim().equals("")))
						hostname = connFactory.getHostName().trim();
					if ((port == null) ||(port.trim().equals("")))
						port = connFactory.getPort().trim();
					if ((channel == null) ||(channel.trim().equals("")))
						channel = connFactory.getChannel().trim();

					// Trax 1-10G93N : Check if the user has specified the prefix, ccsid and encoding
					if ((ccsid == null) ||(ccsid.trim().equals("")))
						ccsid = connFactory.getCCSID().trim();
					if ((encoding == null) ||(encoding.trim().equals("")))
						encoding = connFactory.getEncoding().trim();
					if ((prefix == null) ||(prefix.trim().equals("")))
						prefix = connFactory.getDynamicQueuePrefix().trim();
					
					log(ARTLogger.INFO, 1003, "OverrideConnection", "override queue name =" + qname);
					log(ARTLogger.INFO, 1003, "OverrideConnection", "override queue manager name =" + qmgrname);

//				if ((qmgrname.equals(((wmMQConnection)conn).getResolvedQueueManagerName())) &&
//					(qname.equals(((wmMQConnection)conn).getResolvedQueueName(inbound))) ) 
//					return conn;
//Trax 1-VF52N - make sure all strings are trimmed before comparing
					if (qmgrname != null) 
						qmgrname = qmgrname.trim();
					if (hostname != null) 
						hostname = hostname.trim();
					if (port != null) 
						port = port.trim();
					if (channel != null) 
						channel = channel.trim();
					if (qname != null) 
						qname = qname.trim();				
					// Trax 1-10G93N
					if ((ccsid != null))
						ccsid = ccsid.trim();
					if ((encoding != null))
						encoding = encoding.trim();
					if ((prefix != null))
						prefix = prefix.trim();
					
					if ((!qmgrname.equals(((wmMQConnection)conn).getResolvedQueueManagerName().trim())) ||
						(!hostname.equals(connFactory.getHostName().trim())) ||
						(!port.equals(connFactory.getPort().trim())) || 
						(!channel.equals(connFactory.getChannel().trim())) ||
						(!qname.equals(((wmMQConnection)conn).getResolvedQueueName(inbound).trim())) )
					{ 
						log(ARTLogger.INFO, 1003, "OverrideConnection", "creating new connection for " + qmgrname + "/" + qname);
						log(ARTLogger.INFO, 1003, "OverrideConnection", "hostname=" + hostname + ", port=" + port + ",channel=" + channel);
						//Trax 1-VF52N Number of connections increasing.  Connection is overridden even when it should not be.
						newConn = true;
					
						if (qmgrname.trim().equals(((wmMQConnection)conn).getResolvedQueueManagerName().trim())) 
//						(userid.equals(connFactory.getUserId())) && 
//						(password.equals(connFactory.getPassword())) )  
						{
							//connFactory = (wmMQConnectionFactory)conn.getFactory();
							originalccsid = connFactory.getCCSID();
							originalEncoding = connFactory.getEncoding();
							originalprefix = connFactory.getDynamicQueuePrefix();
							// Trax 1-10G93N : Remember the original connection factory settings
							originalHostname= connFactory.getHostName();
							originalPort = connFactory.getPort();
							originalChannel = connFactory.getChannel();
							originalQname = connFactory.getQueueName();
						}
						else
						{
							//Trax 1-RV4JN - one last attempt to find existing connection
							conn = (wmMQConnection)connFactory.findConnection(qmgrname + hostname + port + channel, prefix + /*userid +*/ qname);
							if (conn == null)
							{
								log(ARTLogger.INFO, 1003, "OverrideConnection", "creating new connection Factory for " + qmgrname + "/" + qname);
								if (connection instanceof wmMQTransactionalConnection)
									connFactory = new wmMQTransactionalConnectionFactory();
								else
									connFactory = new wmMQConnectionFactory();
								log(ARTLogger.INFO, 1003, "OverrideConnection", "created new connection Factory for " + qmgrname + "/" + qname);
//						if ((userid != null) && (!userid.equals("")))
//							connFactory.setUserId(userid);
//						if ((password != null) && (!password.equals("")))
//							connFactory.setPassword(password); 
								newCF = true;
							}
							else {
								// Trax 1-10G93N : Reset the newConn flag to false if a cached connection is found
								newConn = false;
							}
							//Trax 1-VF52N Number of connections increasing.  Connection is overridden even when it should not be.
//						else
//							newConn = true;
						}
					}
				}
				else
				{
					if (connection instanceof wmMQTransactionalConnection)
						connFactory = new wmMQTransactionalConnectionFactory();
					else
						connFactory = new wmMQConnectionFactory();
//				if ((userid != null) && (!userid.equals("")))
//					connFactory.setUserId(userid);
//				if ((password != null) && (!password.equals("")))
//					connFactory.setPassword(password); 
					newCF = true;
				}
				
				//Trax 1-S15OV & 1-RZDD0 - if multiple threads enter this code 
				//segment at the same time, with different property values, 
				//the wrong queue could be accessed.
				//Trax 1-VF52N Number of connections increasing.  Connection is overridden even when it should not be.
				//if ((conn == null) || conn.equals(connection))
				if ((conn == null) || (newConn))
				{
					synchronized (this)
					{
// Trax 1-TDU5E	
//					if ((ccsid != null) && (!ccsid.trim().equals(""))) 
//						connFactory.setCCSID(ccsid);
						
// Trax 1-10G93N : This check already done earlier 				
//					if ((prefix != null) && (!prefix.trim().equals(""))) 
//						connFactory.setDynamicQueuePrefix(prefix);
//					else
//						prefix = connFactory.getDynamicQueuePrefix();
					
						conn = (wmMQConnection)connFactory.findConnection(qmgrname + hostname + port + channel, prefix + /*userid +*/ qname);
						if (conn == null)
						{
							//wmMQConnectionFactory newconnFactory = new wmMQConnectionFactory();
							connFactory.setQueueManagerName(qmgrname.trim());
							connFactory.setQueueName(qname.trim());
							connFactory.setHostName(hostname.trim());
							connFactory.setPort(port.trim());
							connFactory.setChannel(channel.trim());
							
							// Trax 1-10G93N : Set the new prefix
							connFactory.setDynamicQueuePrefix(prefix.trim());

							try
							{
								conn = (wmMQConnection)connFactory.createManagedConnection(null, null);
							}
							catch (ResourceException re)
							{
								//re.printStackTrace();
								throw wmMQAdapter.getInstance().createAdapterConnectionException(1055, new String[]{"Overriding Connection", re.getMessage()}, re.getLinkedException());
							}

							if (conn == null)
							{
								throw wmMQAdapter.getInstance().createAdapterConnectionException(1055, new String[]{"Overriding Connection", "No connection returned"});
							}
							else
							{
								//Now, cache the new connection to the old connFactory
								// Trax 1-RV4JN connections cached to the wrong connFactory
								//connFactory.cacheConnection(conn, qmgrname.trim() + 
								((wmMQConnectionFactory)connection.getFactory()).cacheConnection(conn, qmgrname.trim() +
																  hostname.trim() + 
																  port.trim() + 
																  channel.trim(), 
																  prefix.trim() + qname.trim());
								newConn = true;
								log(ARTLogger.INFO, 1003, "OverrideConnection", "caching " + conn + ",connectionFactory=" + connFactory);
							}
						}
						
						if (!newCF)
						{
// Trax 1-10G93N						
//						if (!originalccsid.trim().equals(""))
//							connFactory.setCCSID(originalccsid);
//						if (!originalprefix.trim().equals(""))
//							connFactory.setDynamicQueuePrefix(originalprefix);
							
							// Trax 1-10G93N : After reusing a connection factory for creating 
							// a new overridden connection, the factory should be restored
							// to its previous glory. Otherwise, any new connections created later 
							// using this factory will use the overridden connection properties 
							// instead of the original ones defined by the user.
							connFactory.setHostName(originalHostname);
							connFactory.setPort(originalPort);
							connFactory.setChannel(originalChannel);
							connFactory.setQueueName(originalQname);
							connFactory.setDynamicQueuePrefix(originalprefix);
							connFactory.setCCSID(originalccsid);
							connFactory.setEncoding(originalEncoding);
						}
					}
				}
			} // End of synchronized(connFactory)
			
//			if ((newConn) && (((wmMQConnection)connection).InTransaction()))
			if ((((wmMQConnection)connection).InTransaction()) &&
				((newConn) || !conn.equals(connection))			)
			{
				wmMQTransactionalConnection wtc = (wmMQTransactionalConnection)conn;
				wtc.begin();
				log(ARTLogger.INFO, 1003, "OverrideConnection", "caching " + conn + " (in transaction)");
				((wmMQTransactionalConnection)connection).cacheConnectionInTransaction(wtc);
			}
				
		}
		catch (AdapterConnectionException ace)
		{
			//ace.printStackTrace();
			throw ace;
		}
		catch (Exception ex)
		{
			//ex.printStackTrace();
			throw wmMQAdapter.getInstance().createAdapterConnectionException(1055, new String[]{"Overriding Connection", ex.getMessage()}, ex);
			//conn = (wmMQConnection)connection; //return original connection
		}
		finally
		{
			if (idc != null)
				idc.destroy();
		}
//		if (!conn.getResolvedQueueName(false).equals(originalqueuename))
//		{
//          log(ARTLogger.CRITICAL, 1003, "OverrideConnection", "asked for " + originalqueuename + ",got" + conn.getResolvedQueueName(false));
//			log(ARTLogger.CRITICAL, 1003, "OverrideConnection", "queueaddr=" + conn.getQueueAddress(false));
//		}
//        String connaddr = conn.toString();
//		log(ARTLogger.CRITICAL, 1003, "OC", "returning conn=" + connaddr.substring(connaddr.indexOf("@")) + 
//				"/" + originalqueuename + "/" + conn.getResolvedQueueName(false));

		log(ARTLogger.INFO, 1002, "OverrideConnection", "");
		return conn;
	}

	public String getPropertyFromInput(WmRecord input, String property)
	{
		log(ARTLogger.INFO, 1001, "getPropertyFromInput", "");
		IData override = null;
		IDataCursor idc = input.getCursor();
		String oneproperty = "";
		try
		{
			if ((idc == null) || (!idc.first(OVERRIDE_CONNECTION_LABEL)))
				return null;

			override = (IData)idc.getValue();
			idc = override.getCursor();
			if (idc == null)
				return null;
			
			if (idc.first(property))
				oneproperty = (String)idc.getValue();
			if (oneproperty != null)
				oneproperty = oneproperty.trim();
		}
		catch (Exception ex)
		{
			//ex.printStackTrace();
		}
		finally
		{
			if (idc != null)
				idc.destroy();
		}

		log(ARTLogger.INFO, 1002, "getPropertyFromInput", "");
		return oneproperty;
	}

	public void fillOverriddenConnection(WmManagedConnection connection, WmRecord output, boolean inbound)	{
		wmMQConnection conn = (wmMQConnection)connection;
		fillOverriddenConnection(conn, output, conn.getResolvedQueueManagerName(), conn.getResolvedQueueName(inbound));
	}
	
	public void fillOverriddenConnection(wmMQConnection connection, WmRecord output, String queueManagerName, String queueName)
	{
		log(ARTLogger.INFO, 1001, "fillOverriddenConnection", "");

		wmMQConnectionFactory connFactory = (wmMQConnectionFactory)connection.getFactory();

		WmRecord overridden = WmRecordFactory.getFactory().createWmRecord(OVERRIDDEN_CONNECTION_LABEL);

		overridden.put(QUEUE_MANAGER_NAME_LABEL, queueManagerName);
		overridden.put(QUEUE_HOST_NAME_LABEL, connFactory.getHostName());
		overridden.put(QUEUE_PORT_LABEL, connFactory.getPort());
		overridden.put(QUEUE_CHANNEL_LABEL, connFactory.getChannel());
		overridden.put(QUEUE_CCSID_LABEL, connFactory.getCCSID());
		overridden.put(QUEUE_ENCODING_LABEL, connFactory.getEncoding());
//		overridden.put(QUEUE_USERID_LABEL, connFactory.getUserId());
//		overridden.put(QUEUE_PASSWORD_LABEL, "");
		
//		String qname = conn.getResolvedQueueName(inbound);
//		if ((qname == null) || (qname.equals("")))
//			qname = conn._queueName; 
		overridden.put(QUEUE_NAME_LABEL, queueName);
		overridden.put(QUEUE_DYNAMIC_QUEUE_PREFIX_LABEL, connFactory.getDynamicQueuePrefix());
		
		output.put(OVERRIDDEN_CONNECTION_LABEL, overridden);
		log(ARTLogger.INFO, 1002, "fillOverriddenConnection", "");
	}

    /*
     * This method populates the metadata object describing
     * this service template in the specified locale.
     * This method will be called once for each service template.
     *
     * The d parameter is the metadata object describing this adapter service.
     * The l parameter is the Locale in which the locale-specific metadata
     * should be populated.
     * AdapterException is thrown if an error is encountered
     * while populating the metadata.
     */
    public void fillWmTemplateDescriptor(WmTemplateDescriptor d, Locale l)
        throws AdapterException
    {

		d.setHidden(wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE, true);
//		d.setHidden(wmMQAdapterConstant.OVERRIDE_PROPERTY_NAMES, true);
		if(		_serviceName.equals(wmMQAdapterConstant.PUT_SERVICE)
			||  _serviceName.equals(wmMQAdapterConstant.REQUEST_REPLY_SERVICE)
		  ) {
			d.setHidden(wmMQAdapterConstant.OVERRIDE_USE_LOCAL_QUEUE_MANAGER, true);
		}
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_QUEUE_MANAGER_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_HOST_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_PORT, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_CHANNEL_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_CCSID, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_ENCODING, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_QUEUE_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_DYNAMIC_QUEUE_PREFIX, true);
//		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_USERID, true);
//		d.setHidden(wmMQAdapterConstant.OVERRIDE_CONNECTION_PASSWORD, true);

		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_QUEUE_MANAGER_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_HOST_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_PORT, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_CHANNEL_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_CCSID, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_ENCODING, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_QUEUE_NAME, true);
		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_DYNAMIC_QUEUE_PREFIX, true);
//		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_USERID, true);
//		d.setHidden(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_PASSWORD, true);


		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE,
							wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE,
							null);

//		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_PROPERTY_NAMES,
//							wmMQAdapterConstant.OVERRIDE_PROPERTY_NAMES,
//							null);

		if(		_serviceName.equals(wmMQAdapterConstant.PUT_SERVICE)
				||  _serviceName.equals(wmMQAdapterConstant.REQUEST_REPLY_SERVICE)
			  ) {
				d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_USE_LOCAL_QUEUE_MANAGER,
									WmTemplateDescriptor.INPUT_FIELD_NAMES,
									new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});
			}

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_QUEUE_MANAGER_NAME,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_HOST_NAME,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_PORT,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_CHANNEL_NAME,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_CCSID,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_ENCODING,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});
		
		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_QUEUE_NAME,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_DYNAMIC_QUEUE_PREFIX,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});
/*
		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_USERID,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDE_CONNECTION_PASSWORD,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});
*/
		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_QUEUE_MANAGER_NAME,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_HOST_NAME,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_PORT,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_CHANNEL_NAME,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_CCSID,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_ENCODING,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_QUEUE_NAME,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_DYNAMIC_QUEUE_PREFIX,
							WmTemplateDescriptor.OUTPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});
/*
		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_USERID,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});

		d.setResourceDomain(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_PASSWORD,
							WmTemplateDescriptor.INPUT_FIELD_NAMES,
							new String[] {wmMQAdapterConstant.OVERRIDE_PROPERTY_TYPE});
*/
//		d.setPassword(wmMQAdapterConstant.OVERRIDE_CONNECTION_PASSWORD);
//		d.setPassword(wmMQAdapterConstant.OVERRIDDEN_CONNECTION_PASSWORD);
    } //fillWmTemplateDescriptor()

	public static void log(int level, int minor, String arg0, String arg1)
	{
		ARTLogger logger = ( (wmMQAdapter) wmMQAdapter.getInstance()).getLogger();
		if (logger == null)
		{
			System.out.println("Logger is null");
			return;
		}
        
        //Trax 1-WVILA. Allow user to override the logging level of adapter messages. 
        if (wmMQAdapter.getLogLevelOverrides().containsKey("" + minor))
        	level =  Integer.parseInt((String)wmMQAdapter.getLogLevelOverrides().get("" + minor)) - ARTLogger.DEBUG;       	
       
		String[] args = new String[2];
		args[0] = arg0;
		args[1] = arg1;
        //Trax log 1-S4OHA - move adapter logging to DEBUG PLUS
        logger.logDebugPlus(level, minor, args);	
	}
	
	public static final String[] overrideConnectionPropertyNames = 
		{
		    wmMQAdapterConstant.OVERRIDE_USE_LOCAL_QUEUE_MANAGER,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_QUEUE_MANAGER_NAME,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_HOST_NAME,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_PORT,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_CHANNEL_NAME,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_CCSID,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_ENCODING,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_QUEUE_NAME,
			wmMQAdapterConstant.OVERRIDE_CONNECTION_DYNAMIC_QUEUE_PREFIX
//			wmMQAdapterConstant.OVERRIDE_CONNECTION_USERID,
//			wmMQAdapterConstant.OVERRIDE_CONNECTION_PASSWORD						
		};
}