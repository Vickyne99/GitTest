<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="shared">DQpwcml2YXRlIHN0YXRpYyBOU05hbWUgX2xvb2t1cENvcnJTZXJ2aWNlCT0gTlNOYW1lLmNyZWF0
ZSggInB1Yi5wcnQuY29ycmVsYXRlIiwgImxvb2t1cENvcnJlbGF0aW9uIik7DQpwcml2YXRlIHN0
YXRpYyBOU05hbWUgX2VzdGFibGlzaENvcnJTZXJ2aWNlCT0gTlNOYW1lLmNyZWF0ZSggInB1Yi5w
cnQuY29ycmVsYXRlIiwgImVzdGFibGlzaENvcnJlbGF0aW9uIik7DQoNCi8qKg0KICogTG9va3Mg
dXAgdGhlIHByb2Nlc3MgaW5zdGFuY2UgaWQgZm9yIGFuIGdpdmVuIGNvcnJlbGF0aW9uIGlkLg0K
ICogDQogKiBAcGFyYW0JY2lkIFRoZSBjb3JyZWxhdGlvbiBpZA0KICogQHJldHVybgl0aGUgcHJv
Y2VzcyBpbnN0YW5jZSBpZA0KICogQHRocm93cwlTZXJ2aWNlRXhjZXB0aW9uIGlmIHRoZXJlIGlz
IGFuIGVycm9yIGR1cmluZyBleGVjdXRpb24gb2YgdGhlIHVuZGVybHlpbmcgc2VydmljZQ0KICov
DQpwcml2YXRlIHN0YXRpYyBTdHJpbmcgbG9va3VwQ29ycmVsYXRpb24oIFN0cmluZyBjaWQpIHRo
cm93cyBTZXJ2aWNlRXhjZXB0aW9uDQp7DQoJU3RyaW5nIHBpZCA9IG51bGw7DQoJdHJ5DQoJew0K
CQlPYmplY3QgW11bXSBvID0NCgkJew0KCQkJeyAiUHJvY2Vzc0NvcnJlbGF0aW9uSUQiLCBjaWQJ
CQl9LA0KCQkJeyAiTWFwcGluZ1R5cGUiCQkJLCAiSVMiCQkJfSwNCgkJCXsgIkNyZWF0ZUlmTWlz
c2luZyIJCSwgImZhbHNlIgkJfSwNCgkJfTsNCgkJSURhdGEgY29yclBpcGU7DQoJCWNvcnJQaXBl
ID0gU2VydmljZS5kb0ludm9rZSggX2xvb2t1cENvcnJTZXJ2aWNlLCBJRGF0YUZhY3RvcnkuY3Jl
YXRlKCBvKSk7DQoJCUlEYXRhQ3Vyc29yIGlwYyA9IGNvcnJQaXBlLmdldEN1cnNvcigpOw0KCQlw
aWQgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBpcGMsICJQcm9jZXNzSW5zdGFuY2VJRCIpOw0KCQlp
cGMuZGVzdHJveSgpOw0KCX0NCgljYXRjaCggRXhjZXB0aW9uIGUpDQoJew0KCQl0aHJvdyBuZXcg
U2VydmljZUV4Y2VwdGlvbiggZSk7DQoJfQ0KCXJldHVybiBnZXRQcm9jZXNzSUQoIHBpZCk7DQp9
DQoNCi8qKg0KICogRXN0YWJsaXNoZXMgYSBuZXcgY29ycmVsYXRpb24gYmV0d2VlbiB0aGUgcHJv
dmlkZWQgcHJvY2VzcyBpbnN0YW5jZSBpZCBhbmQNCiAqIGEgZ2l2ZW4gY29ycmVsYXRpb24gaWQu
DQogKiANCiAqIEBwYXJhbQlwaWQgVGhlIHByb2Nlc3MgaW5zdGFuY2UgaWQNCiAqIEBwYXJhbQlj
aWQgVGhlIGNvcnJlbGF0aW9uIGlkDQogKiBAcmV0dXJuCTxjb2RlPnRydWU8L2NvZGU+IGlmIHRo
ZSBjb3JyZWxhdGlvbiBnb3QgZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5LA0KICogCQkJPGNvZGU+
ZmFsc2U8L2NvZGU+IG90aGVyd2lzZQ0KICogQHRocm93cwlTZXJ2aWNlRXhjZXB0aW9uIGlmIHRo
ZXJlIGlzIGFuIGVycm9yIGR1cmluZyBleGVjdXRpb24gb2YgdGhlIHVuZGVybHlpbmcgc2Vydmlj
ZQ0KICovDQpwcml2YXRlIHN0YXRpYyBib29sZWFuIGVzdGFibGlzaENvcnJlbGF0aW9uKCBTdHJp
bmcgcGlkLCBTdHJpbmcgY2lkKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbg0Kew0KCXRyeQ0KCXsN
CgkJT2JqZWN0IFtdW10gbyA9DQoJCXsNCgkJCXsgIlByb2Nlc3NDb3JyZWxhdGlvbklEIiwgY2lk
CQkJCX0sDQoJCQl7ICJQcm9jZXNzSW5zdGFuY2VJRCIJLCBwaWQJCQkJfSwNCgkJCXsgIk1hcHBp
bmdUeXBlIgkJCSwgIklTIgkJCQl9LA0KCQl9Ow0KCQlJRGF0YSBjb3JyUGlwZTsNCgkJY29yclBp
cGUgPSBTZXJ2aWNlLmRvSW52b2tlKCBfZXN0YWJsaXNoQ29yclNlcnZpY2UsIElEYXRhRmFjdG9y
eS5jcmVhdGUoIG8pKTsNCgkJSURhdGFDdXJzb3IgaXBjID0gY29yclBpcGUuZ2V0Q3Vyc29yKCk7
DQoJCWJvb2xlYW4gc3VjY2VzcyA9IElEYXRhVXRpbC5nZXRCb29sZWFuKCBpcGMsICJzdWNjZXNz
Iik7DQoJCWlwYy5kZXN0cm95KCk7DQoJCXJldHVybiBzdWNjZXNzOw0KCX0NCgljYXRjaCggRXhj
ZXB0aW9uIGUpDQoJew0KCQl0aHJvdyBuZXcgU2VydmljZUV4Y2VwdGlvbiggZSk7DQoJfQ0KfQ0K
DQovKioNCiAqIFJldHJpZXZlcyB0aGUgcHVyZSBwcm9jZXNzIGluc3RhbmNlIGlkIHdpdGhvdXQg
aXRlcmF0aW9uIGlkZW50aWZpZXIuDQogKiANCiAqIEBwYXJhbQljb21iaW5lZElkIFRoZSBwcm9j
ZXNzIGluc3RhbmNlIGlkIHBsdXMgaXRlcmF0aW9uIG51bWJlcg0KICogQHJldHVybgl0aGUgcHVy
ZSBwcm9jZXNzIGluc3RhbmNlIGlkIHdpdGhvdXQgaXRlcmF0aW9uIGlkZW50aWZpZXINCiAqLw0K
cHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGdldFByb2Nlc3NJRCggU3RyaW5nIGNvbWJpbmVkSWQpDQp7
DQoJaWYoIGNvbWJpbmVkSWQgPT0gbnVsbCkNCgkJcmV0dXJuIG51bGw7DQoJZWxzZSBpZiggY29t
YmluZWRJZC5sYXN0SW5kZXhPZiggJzonKSAhPSAtMSkNCgkJcmV0dXJuIGNvbWJpbmVkSWQuc3Vi
c3RyaW5nKCAwLCBjb21iaW5lZElkLmxhc3RJbmRleE9mKCAnOicpKTsNCgllbHNlDQoJCXJldHVy
biBjb21iaW5lZElkOw0KfQ0KDQovKioNCiAqIFJldHJpZXZlcyB0aGUgaXRlcmF0aW9uIG51bWJl
ciBmb3IgdGhpcyBwcm9jZXNzIGluc3RhbmNlLg0KICogDQogKiBAcGFyYW0JY29tYmluZWRJZCBU
aGUgcHJvY2VzcyBpbnN0YW5jZSBpZCBwbHVzIGl0ZXJhdGlvbiBudW1iZXINCiAqIEByZXR1cm4J
dGhlIGl0ZXJhdGlvbiBpZGVudGlmaWVyDQogKi8NCnByaXZhdGUgc3RhdGljIEludGVnZXIgZ2V0
SXRlcmF0aW9uKCBTdHJpbmcgY29tYmluZWRJZCkNCnsNCglpZiggY29tYmluZWRJZCA9PSBudWxs
KQ0KCQlyZXR1cm4gbmV3IEludGVnZXIoIDEpOw0KDQoJY29tYmluZWRJZCA9IGNvbWJpbmVkSWQu
dHJpbSgpOw0KCWlmKCBjb21iaW5lZElkLmxhc3RJbmRleE9mKCAnOicpICE9IC0xKQ0KCQlyZXR1
cm4gbmV3IEludGVnZXIoIGNvbWJpbmVkSWQuc3Vic3RyaW5nKCBjb21iaW5lZElkLmxhc3RJbmRl
eE9mKCAnOicpICsgMSkpOw0KCWVsc2UNCgkJcmV0dXJuIG5ldyBJbnRlZ2VyKCAxKTsNCn0NCg0K
LyoqDQogKiBSZXR1cm5zIHRoZSBidXNpbmVzcyBvYmplY3QgaWQuDQogKiANCiAqIEByZXR1cm4J
dGhlIGJ1c2luZXNzIG9iamVjdCBpZA0KICovDQpwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0T2Jq
ZWN0SWQoIElEYXRhIGJvKQ0Kew0KCUlEYXRhQ3Vyc29yIGlkYyA9IGJvLmdldEN1cnNvcigpOw0K
CVN0cmluZyBjaWQgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBpZGMsICJvYmplY3RJRCIpOw0KCWlk
Yy5kZXN0cm95KCk7DQoJcmV0dXJuIChjaWQgIT0gbnVsbCAmJiBjaWQubGVuZ3RoKCkgPiAwKSA/
IGNpZCA6IG51bGw7DQp9DQoNCi8qKg0KICogUmV0dXJucyB0aGUgcmVjZWl2ZXIgdHlwZSBmcm9t
IHRoZSBwaXBlbGluZS4NCiAqIA0KICogQHBhcmFtCWlkYyBUaGUge0BsaW5rIElEYXRhfSBjdXJz
b3INCiAqIEByZXR1cm4JdGhlIHJlY2VpdmVyIHR5cGUgZnJvbSB0aGUgcGlwZWxpbmUNCiAqLw0K
cHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGdldFJlY2VpdmVyVHlwZSggSURhdGFDdXJzb3IgaWRjKQ0K
ew0KCVN0cmluZyBydCA9IElEYXRhVXRpbC5nZXRTdHJpbmcoIGlkYywgInJlY2VpdmVyVHlwZSIp
Ow0KCWlmKCBydCA9PSBudWxsKQ0KCQlydCA9IElEYXRhVXRpbC5nZXRTdHJpbmcoIGlkYywgIlJF
Q0VJVkVSVFlQRSIpOw0KCXJldHVybiBydDsNCn0NCg0KLyoqDQogKiBRdWVyaWVzIElEb2Mgc2Vn
bWVudHMgPGNvZGU+RTFFREswMjwvY29kZT4gZm9yIHJlZmVyZW5jZSBpZCdzLg0KICogDQogKiBA
cGFyYW0JaWRvY1NlZ21lbnRzIExpc3Qgb2YgPGNvZGU+RTFFREswMjwvY29kZT4gSURvYyBzZWdt
ZW50cw0KICogQHJldHVybglvbmUgcmVmZXJlbmNlIGlkIGZyb20gdGhlIGxpc3Qgb2YgcmVmZXJl
bmNlIGlkJ3Mgb3IgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm9uZSB3YXMgZm91bmQNCiAqLw0KcHJp
dmF0ZSBzdGF0aWMgU3RyaW5nIGV4dHJhY3RJRG9jUmVmZXJlbmNlKCBJRGF0YVtdIGlkb2NTZWdt
ZW50cykNCnsNCgkvLyBSZWFkaW5nIHRoZSBjb21wbGV0ZSBsaXN0IGZvciB0aGUgZmlyc3QgZG9j
dW1lbnQgbnVtYmVyIHVzZWQuIFNob3VsZCBiZQ0KCS8vIHRoZSBpbnF1aXJ5LCBxdW90YXRpb24s
IG9yIG9yZGVyIG51bWJlci4NCglTdHJpbmcgYmVsbnIgPSBudWxsOw0KCWZvciggaW50IGkgPSAw
OyBpIDwgaWRvY1NlZ21lbnRzLmxlbmd0aDsgaSsrKQ0KCXsNCgkJU3RyaW5nIG5ld0JlbG5yID0g
ZXh0cmFjdElEb2NSZWZlcmVuY2UoIGlkb2NTZWdtZW50c1tpXSk7DQoJCWJlbG5yID0gbmV3QmVs
bnIgIT0gbnVsbCA/IG5ld0JlbG5yIDogYmVsbnI7DQoJfQ0KCXJldHVybiBiZWxucjsNCn0NCg0K
LyoqDQogKiBRdWVyaWVzIHRoZSBmaWVsZHMgZnJvbSBJRG9jIHNlZ21lbnQgPGNvZGU+RTFFREsw
MjwvY29kZT4gZm9yIHJlZmVyZW5jZQ0KICogaWQncy4NCiAqIA0KICogQHBhcmFtCWlkb2NTZWdt
ZW50IE9uZSA8Y29kZT5FMUVESzAyPC9jb2RlPiBJRG9jIHNlZ21lbnQNCiAqIEByZXR1cm4Jb25l
IHJlZmVyZW5jZSBpZCBmcm9tIHRoZSBsaXN0IG9mIHJlZmVyZW5jZSBpZCdzIG9yIDxjb2RlPm51
bGw8L2NvZGU+IGlmIG5vbmUgd2FzIGZvdW5kDQogKi8NCnByaXZhdGUgc3RhdGljIFN0cmluZyBl
eHRyYWN0SURvY1JlZmVyZW5jZSggSURhdGEgaWRvY1NlZ21lbnQpDQp7DQoJSURhdGFDdXJzb3Ig
aWRjID0gaWRvY1NlZ21lbnQuZ2V0Q3Vyc29yKCk7DQoJaW50IHF1YWxmID0gSURhdGFVdGlsLmdl
dEludCggaWRjLCAiUVVBTEYiLCAtMSk7DQoJU3RyaW5nIGJlbG5yID0gSURhdGFVdGlsLmdldFN0
cmluZyggaWRjLCAiQkVMTlIiKTsNCglTdHJpbmcgdmdiZWwgPSBJRGF0YVV0aWwuZ2V0U3RyaW5n
KCBpZGMsICJWR0JFTCIpOw0KCWlkYy5kZXN0cm95KCk7DQoJDQoJLy8gU2VnbWVudCBmcm9tIERF
U0FEVjAxDQoJaWYodmdiZWwgIT0gbnVsbCkNCgkJcmV0dXJuIHZnYmVsOw0KDQoJLy8gU2VnbWVu
dCBmcm9tIE9SREVSUzA1IG9yIElOVk9JQzAyDQoJc3dpdGNoKCBxdWFsZikNCgl7DQoJCWNhc2Ug
MDAzOiAvLyBSZWZlcmVuY2UgdG8gQ3VzdG9tZXJJbnF1aXJ5DQoJCWNhc2UgMDA0OiAvLyBSZWZl
cmVuY2UgdG8gQ3VzdG9tZXJRdW90YXRpb24NCgkJY2FzZSAwMDI6IC8vIFJlZmVyZW5jZSB0byBT
YWxlc09yZGVyDQoJCQlyZXR1cm4gYmVsbnI7DQoJCWRlZmF1bHQ6DQoJCQlyZXR1cm4gbnVsbDsN
Cgl9DQp9DQoNCi8qKg0KICogRXh0cmFjdHMgdGhlIGNvcnJlbGF0aW9uIGlkIGZyb20gdGhlIDxj
b2RlPmV2ZW50PC9jb2RlPi88Y29kZT5yZmM8L2NvZGU+IGRvY3VtZW50Lg0KICogDQogKiBAcGFy
YW0JZG9jdW1lbnQgVGhlIHJlY2VpdmVkIGRvY3VtZW50IG9mIGRvY3VtZW50DQogKiBAcmV0dXJu
CXRoZSBjb3JyZWxhdGlvbiBpZA0KICovDQpwcml2YXRlIHN0YXRpYyBTdHJpbmcgZ2V0Q29ycmVs
YXRpb25JRCggSURhdGEgZG9jdW1lbnQpDQp7DQoJSURhdGFDdXJzb3IgaWRjID0gZG9jdW1lbnQu
Z2V0Q3Vyc29yKCk7DQoNCgkvLyBFeHRyYWN0cyB0aGUgcmVmZXJlbmNlIGlkIGZyb20gdGhlIElE
b2MgZG9jdW1lbnQNCglJRGF0YSBpZG9jTGlzdCA9IElEYXRhVXRpbC5nZXRJRGF0YSggaWRjLCAi
T1JERVJTMDUiKTsNCglpZiAoaWRvY0xpc3QgPT0gbnVsbCkNCgkJaWRvY0xpc3QgPSBJRGF0YVV0
aWwuZ2V0SURhdGEoIGlkYywgIklOVk9JQzAyIik7DQoJaWYgKGlkb2NMaXN0ID09IG51bGwpDQoJ
CWlkb2NMaXN0ID0gSURhdGFVdGlsLmdldElEYXRhKCBpZGMsICJERVNBRFYwMSIpOw0KCWlmIChp
ZG9jTGlzdCAhPSBudWxsKQ0KCXsNCgkJSURhdGFDdXJzb3IgaWRvY0xpc3RDdXJzb3IgPSBpZG9j
TGlzdC5nZXRDdXJzb3IoKTsNCgkJSURhdGEgaWRvYyA9IElEYXRhVXRpbC5nZXRJRGF0YUFycmF5
KCBpZG9jTGlzdEN1cnNvciwgIklET0MiKVswXTsNCgkJaWRvY0xpc3RDdXJzb3IuZGVzdHJveSgp
Ow0KCQlJRGF0YUN1cnNvciBpZG9jQ3Vyc29yID0gaWRvYy5nZXRDdXJzb3IoKTsNCgkJSURhdGFb
XSBpZG9jU2VnbWVudHMgPSBJRGF0YVV0aWwuZ2V0SURhdGFBcnJheSggaWRvY0N1cnNvciwgIkUx
RURLMDIiKTsNCgkJaWYgKGlkb2NTZWdtZW50cyA9PSBudWxsKQ0KCQl7DQoJCQlJRGF0YSBpZG9j
U2VnbWVudCA9IElEYXRhVXRpbC5nZXRJRGF0YUFycmF5KCBpZG9jQ3Vyc29yLCAiRTFFREswOCIp
WzBdOw0KCQkJSURhdGFDdXJzb3IgaWRvY1NlZ21lbnRDdXJzb3IgPSBpZG9jU2VnbWVudC5nZXRD
dXJzb3IoKTsNCgkJCWlkb2NTZWdtZW50cyA9IElEYXRhVXRpbC5nZXRJRGF0YUFycmF5KCBpZG9j
U2VnbWVudEN1cnNvciwgIkUxRURQMDciKTsNCgkJCWlkb2NTZWdtZW50Q3Vyc29yLmRlc3Ryb3ko
KTsNCgkJfQ0KCQlpZG9jQ3Vyc29yLmRlc3Ryb3koKTsNCgkJcmV0dXJuIGV4dHJhY3RJRG9jUmVm
ZXJlbmNlKCBpZG9jU2VnbWVudHMpOw0KCX0NCg0KCS8vIEl0J3Mgbm90IGFuIElEb2MgLi4uIGNo
ZWNrIHJmYyBkb2N1bWVudA0KCVN0cmluZyBjaWQgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBpZGMs
ICJDT1JSRUxBVElPTk9CSkVDVElEIik7DQoJLy8gTm8gc3BlY2lmaWMgY29ycmVsYXRpb24gaWQg
Zm91bmQgLi4uIHVzZSBldmVudCBpZCBpbnN0ZWFkDQoJaWYoIGNpZCA9PSBudWxsIHx8IGNpZC5s
ZW5ndGgoKSA9PSAwKQ0KCQljaWQgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBpZGMsICJFVkVOVE9C
SkVDVElEIik7DQoJaWYoIGNpZCAhPSBudWxsICYmIGNpZC5sZW5ndGgoKSA+IDApDQoJew0KCQlp
ZGMuZGVzdHJveSgpOw0KCQlyZXR1cm4gY2lkOw0KCX0NCg0KCS8vIEl0J3Mgbm90IGFuIHJmYyBk
b2N1bWVudCAuLi4gY2hlY2sgZXZlbnQgZG9jdW1lbnQNCglJRGF0YSBldnRPYmplY3QgPSBJRGF0
YVV0aWwuZ2V0SURhdGEoIGlkYywgImV2ZW50T2JqZWN0Iik7DQoJSURhdGEgY29yck9iamVjdCA9
IElEYXRhVXRpbC5nZXRJRGF0YSggaWRjLCAiY29ycmVsYXRpb25PYmplY3QiKTsNCglpZGMuZGVz
dHJveSgpOw0KDQoJSURhdGEgYXBwbE9iamVjdCA9IG51bGw7DQoJaWYoIGV2dE9iamVjdCAhPSBu
dWxsKQ0KCXsNCgkJSURhdGFDdXJzb3IgZW9jID0gZXZ0T2JqZWN0LmdldEN1cnNvcigpOw0KCQlJ
RGF0YSBpbnB1dFBhcmFtcyA9IElEYXRhVXRpbC5nZXRJRGF0YSggZW9jLCAiZmllbGRzIik7DQoJ
CWVvYy5kZXN0cm95KCk7DQoJCWlmKCBpbnB1dFBhcmFtcyAhPSBudWxsKQ0KCQl7DQoJCQlJRGF0
YUN1cnNvciBpcGMgPSBpbnB1dFBhcmFtcy5nZXRDdXJzb3IoKTsNCgkJCWFwcGxPYmplY3QgPSBJ
RGF0YVV0aWwuZ2V0SURhdGEoIGlwYywgIkFwcGxfT2JqZWN0Iik7DQoJCQlpcGMuZGVzdHJveSgp
Ow0KCQl9DQoJfQ0KDQoJLy8gUmVwbGFjZSBldmVudCBCTyBieSBhcHBsaWNhdGlvbiBCTw0KCWlm
KCBjb3JyT2JqZWN0ICE9IG51bGwpDQoJCWNpZCA9IGdldE9iamVjdElkKCBjb3JyT2JqZWN0KTsN
Cg0KCWlmKCBjaWQgPT0gbnVsbCAmJiBhcHBsT2JqZWN0ICE9IG51bGwpDQoJCWNpZCA9IGdldE9i
amVjdElkKCBhcHBsT2JqZWN0KTsNCg0KCWlmKCBjaWQgPT0gbnVsbCkNCgkJY2lkID0gZ2V0T2Jq
ZWN0SWQoIGV2dE9iamVjdCk7DQoJcmV0dXJuIGNpZDsNCn0NCg0KLyoqDQogKiBFeHRyYWN0cyB0
aGUgZXZlbnQgaWQgZnJvbSB0aGUgPGNvZGU+ZXZlbnQ8L2NvZGU+Lzxjb2RlPnJmYzwvY29kZT4g
ZG9jdW1lbnQuDQogKiANCiAqIEBwYXJhbQlkb2N1bWVudCBUaGUgcmVjZWl2ZWQgZG9jdW1lbnQN
CiAqIEByZXR1cm4JdGhlIGV2ZW50IGlkDQogKi8NCnByaXZhdGUgc3RhdGljIFN0cmluZyBnZXRF
dmVudElEKCBJRGF0YSBkb2N1bWVudCkNCnsNCglJRGF0YUN1cnNvciBpZGMgPSBkb2N1bWVudC5n
ZXRDdXJzb3IoKTsNCg0KCS8vIEV4dHJhY3RzIHRoZSByZWZlcmVuY2UgaWQgZnJvbSB0aGUgSURv
YyBkb2N1bWVudA0KCUlEYXRhIGlkb2NMaXN0ID0gSURhdGFVdGlsLmdldElEYXRhKCBpZGMsICJP
UkRFUlMwNSIpOw0KCWlmIChpZG9jTGlzdCA9PSBudWxsKQ0KCQlpZG9jTGlzdCA9IElEYXRhVXRp
bC5nZXRJRGF0YSggaWRjLCAiSU5WT0lDMDIiKTsNCglpZiAoaWRvY0xpc3QgPT0gbnVsbCkNCgkJ
aWRvY0xpc3QgPSBJRGF0YVV0aWwuZ2V0SURhdGEoIGlkYywgIkRFU0FEVjAxIik7DQoJaWYgKGlk
b2NMaXN0ICE9IG51bGwpDQoJew0KCQlJRGF0YUN1cnNvciBpZG9jTGlzdEN1cnNvciA9IGlkb2NM
aXN0LmdldEN1cnNvcigpOw0KCQlJRGF0YSBpZG9jID0gSURhdGFVdGlsLmdldElEYXRhQXJyYXko
IGlkb2NMaXN0Q3Vyc29yLCAiSURPQyIpWzBdOw0KCQlpZG9jTGlzdEN1cnNvci5kZXN0cm95KCk7
DQoJCUlEYXRhQ3Vyc29yIGlkb2NDdXJzb3IgPSBpZG9jLmdldEN1cnNvcigpOw0KCQlJRGF0YSBp
ZG9jU2VnbWVudCA9IElEYXRhVXRpbC5nZXRJRGF0YSggaWRvY0N1cnNvciwgIkVESV9EQzQwIik7
DQoJCWlkb2NDdXJzb3IuZGVzdHJveSgpOw0KCQlJRGF0YUN1cnNvciBpZG9jU2VnbWVudEN1cnNv
ciA9IGlkb2NTZWdtZW50LmdldEN1cnNvcigpOw0KCQlTdHJpbmcgZG9jTnVtID0gSURhdGFVdGls
LmdldFN0cmluZyggaWRvY1NlZ21lbnRDdXJzb3IsICJET0NOVU0iKTsNCgkJaWRvY1NlZ21lbnRD
dXJzb3IuZGVzdHJveSgpOw0KCQlyZXR1cm4gZG9jTnVtOw0KCX0NCg0KCS8vIEl0J3Mgbm90IGFu
IElEb2MgLi4uIGNoZWNrIGV2ZW50IGRvY3VtZW50DQoJSURhdGEgZXZ0T2JqZWN0ID0gSURhdGFV
dGlsLmdldElEYXRhKCBpZGMsICJldmVudE9iamVjdCIpOw0KCWlmKCBldnRPYmplY3QgIT0gbnVs
bCkNCgl7DQoJCWlkYy5kZXN0cm95KCk7DQoJCXJldHVybiBnZXRPYmplY3RJZCggZXZ0T2JqZWN0
KTsNCgl9DQoNCgkvLyBJdCdzIG5vdCBhbiBldmVudCBkb2N1bWVudCAuLi4gY2hlY2sgcmZjIGRv
Y3VtZW50DQoJU3RyaW5nIGNpZCA9IElEYXRhVXRpbC5nZXRTdHJpbmcoIGlkYywgIkVWRU5UT0JK
RUNUSUQiKTsNCglpZiggY2lkICE9IG51bGwgJiYgY2lkLmxlbmd0aCgpID4gMCkNCgl7DQoJCWlk
Yy5kZXN0cm95KCk7DQoJCXJldHVybiBjaWQ7DQoJfQ0KDQoJLy8gZGVmYXVsdA0KCWlkYy5kZXN0
cm95KCk7DQoJcmV0dXJuIG51bGw7DQp9DQo=</value>
  <value name="encodeutf8">true</value>
  <array name="imports" type="value" depth="1">
    <value>com.wm.app.b2b.server.Service</value>
    <value>com.wm.app.b2b.server.ServiceException</value>
    <value>com.wm.data.IData</value>
    <value>com.wm.data.IDataCursor</value>
    <value>com.wm.data.IDataFactory</value>
    <value>com.wm.data.IDataUtil</value>
    <value>com.wm.lang.ns.NSName</value>
  </array>
</Values>
